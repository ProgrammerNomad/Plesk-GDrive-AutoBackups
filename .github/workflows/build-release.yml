name: Build Plesk Extension Package

on:
  push:
    tags:
      - 'v*.*.*'  # Run workflow on version tags, e.g. v1.0.0
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: dom, curl, json, zip
          tools: composer:v2
          
      - name: Get version from tag
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=dev-build-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          fi
          
      - name: Display repository structure
        run: |
          echo "Building Plesk GDrive AutoBackups Extension"
          echo "Version: ${{ steps.get_version.outputs.VERSION }}"
          echo "Repository structure:"
          ls -la
          
      - name: Install Composer dependencies
        run: |
          composer install --no-dev --optimize-autoloader
          
      - name: Make scripts executable
        run: |
          # Check if scripts directory exists first
          if [ -d "plib/scripts" ]; then
            find plib/scripts -name "*.php" -exec chmod +x {} \;
            echo "Made script files executable"
          else
            echo "Scripts directory not found, skipping permissions"
          fi
          
      - name: Create directory structure
        run: |
          mkdir -p build/plesk-gdrive-autobackups
          
      - name: Copy files to build directory
        run: |
          # Core files and directories
          if [ -d "htdocs" ]; then
            cp -r htdocs build/plesk-gdrive-autobackups/
          else
            mkdir -p build/plesk-gdrive-autobackups/htdocs
            echo "Created empty htdocs directory"
          fi
          
          if [ -d "plib" ]; then
            cp -r plib build/plesk-gdrive-autobackups/
          else
            mkdir -p build/plesk-gdrive-autobackups/plib
            echo "Created empty plib directory"
          fi
          
          cp meta.xml build/plesk-gdrive-autobackups/
          cp LICENSE build/plesk-gdrive-autobackups/ || echo "LICENSE file not found, skipping"
          
          # Copy subdirectories that might exist in the nested structure
          if [ -d "Plesk-GDrive-AutoBackups/htdocs" ]; then
            cp -r Plesk-GDrive-AutoBackups/htdocs/* build/plesk-gdrive-autobackups/htdocs/
            echo "Copied nested htdocs content"
          fi
          
          if [ -d "Plesk-GDrive-AutoBackups/plib" ]; then
            cp -r Plesk-GDrive-AutoBackups/plib/* build/plesk-gdrive-autobackups/plib/
            echo "Copied nested plib content"
          fi
          
          # Ensure we don't include development files in the build
          if [ -d "build/plesk-gdrive-autobackups/plib/vendor" ]; then
            find build/plesk-gdrive-autobackups/plib/vendor -type d -name "tests" -exec rm -rf {} + 2>/dev/null || true
            find build/plesk-gdrive-autobackups/plib/vendor -type d -name "docs" -exec rm -rf {} + 2>/dev/null || true
            find build/plesk-gdrive-autobackups/plib/vendor -type d -name "examples" -exec rm -rf {} + 2>/dev/null || true
            echo "Cleaned up vendor directories"
          fi
          
      - name: Update version in meta.xml
        run: |
          if [ -f "build/plesk-gdrive-autobackups/meta.xml" ]; then
            sed -i "s/<version>.*<\/version>/<version>${{ steps.get_version.outputs.VERSION }}<\/version>/" build/plesk-gdrive-autobackups/meta.xml
            echo "Updated version in meta.xml to ${{ steps.get_version.outputs.VERSION }}"
          else
            echo "meta.xml not found in build directory"
          fi
          
      - name: Create ZIP package
        run: |
          cd build
          zip -r plesk-gdrive-autobackups-${{ steps.get_version.outputs.VERSION }}.zip plesk-gdrive-autobackups
          echo "Package created at build/plesk-gdrive-autobackups-${{ steps.get_version.outputs.VERSION }}.zip"
          
      - name: Upload extension as artifact
        uses: actions/upload-artifact@v4
        with:
          name: plesk-gdrive-autobackups-${{ steps.get_version.outputs.VERSION }}
          path: build/plesk-gdrive-autobackups-${{ steps.get_version.outputs.VERSION }}.zip
          
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: build/plesk-gdrive-autobackups-${{ steps.get_version.outputs.VERSION }}.zip
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true